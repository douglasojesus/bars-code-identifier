// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/05/2023 12:18:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    identificadorDeCodigoDeBarras
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module identificadorDeCodigoDeBarras_vlg_sample_tst(
	E0,
	E1,
	E2,
	E3,
	E4,
	E5,
	E6,
	E7,
	sampler_tx
);
input  E0;
input  E1;
input  E2;
input  E3;
input  E4;
input  E5;
input  E6;
input  E7;
output sampler_tx;

reg sample;
time current_time;
always @(E0 or E1 or E2 or E3 or E4 or E5 or E6 or E7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module identificadorDeCodigoDeBarras_vlg_check_tst (
	C0,
	C1,
	C2,
	C3,
	C4,
	L0,
	L1,
	L2,
	L3,
	L4,
	L5,
	L6,
	a,
	b,
	c,
	d,
	dig,
	e,
	f,
	g,
	ledG,
	ledR,
	sampler_rx
);
input  C0;
input  C1;
input  C2;
input  C3;
input  C4;
input  L0;
input  L1;
input  L2;
input  L3;
input  L4;
input  L5;
input  L6;
input  a;
input  b;
input  c;
input  d;
input  dig;
input  e;
input  f;
input  g;
input  ledG;
input  ledR;
input sampler_rx;

reg  C0_expected;
reg  C1_expected;
reg  C2_expected;
reg  C3_expected;
reg  C4_expected;
reg  L0_expected;
reg  L1_expected;
reg  L2_expected;
reg  L3_expected;
reg  L4_expected;
reg  L5_expected;
reg  L6_expected;
reg  a_expected;
reg  b_expected;
reg  c_expected;
reg  d_expected;
reg  dig_expected;
reg  e_expected;
reg  f_expected;
reg  g_expected;
reg  ledG_expected;
reg  ledR_expected;

reg  C0_prev;
reg  C1_prev;
reg  C2_prev;
reg  C3_prev;
reg  C4_prev;
reg  L0_prev;
reg  L1_prev;
reg  L2_prev;
reg  L3_prev;
reg  L4_prev;
reg  L5_prev;
reg  L6_prev;
reg  a_prev;
reg  b_prev;
reg  c_prev;
reg  d_prev;
reg  dig_prev;
reg  e_prev;
reg  f_prev;
reg  g_prev;
reg  ledG_prev;
reg  ledR_prev;

reg  C0_expected_prev;
reg  C1_expected_prev;
reg  C2_expected_prev;
reg  C3_expected_prev;
reg  C4_expected_prev;
reg  L0_expected_prev;
reg  L1_expected_prev;
reg  L2_expected_prev;
reg  L3_expected_prev;
reg  L4_expected_prev;
reg  L5_expected_prev;
reg  L6_expected_prev;
reg  a_expected_prev;
reg  b_expected_prev;
reg  c_expected_prev;
reg  d_expected_prev;
reg  dig_expected_prev;
reg  e_expected_prev;
reg  f_expected_prev;
reg  g_expected_prev;
reg  ledG_expected_prev;
reg  ledR_expected_prev;

reg  last_C0_exp;
reg  last_C1_exp;
reg  last_C2_exp;
reg  last_C3_exp;
reg  last_C4_exp;
reg  last_L0_exp;
reg  last_L1_exp;
reg  last_L2_exp;
reg  last_L3_exp;
reg  last_L4_exp;
reg  last_L5_exp;
reg  last_L6_exp;
reg  last_a_exp;
reg  last_b_exp;
reg  last_c_exp;
reg  last_d_exp;
reg  last_dig_exp;
reg  last_e_exp;
reg  last_f_exp;
reg  last_g_exp;
reg  last_ledG_exp;
reg  last_ledR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	C0_prev = C0;
	C1_prev = C1;
	C2_prev = C2;
	C3_prev = C3;
	C4_prev = C4;
	L0_prev = L0;
	L1_prev = L1;
	L2_prev = L2;
	L3_prev = L3;
	L4_prev = L4;
	L5_prev = L5;
	L6_prev = L6;
	a_prev = a;
	b_prev = b;
	c_prev = c;
	d_prev = d;
	dig_prev = dig;
	e_prev = e;
	f_prev = f;
	g_prev = g;
	ledG_prev = ledG;
	ledR_prev = ledR;
end

// update expected /o prevs

always @(trigger)
begin
	C0_expected_prev = C0_expected;
	C1_expected_prev = C1_expected;
	C2_expected_prev = C2_expected;
	C3_expected_prev = C3_expected;
	C4_expected_prev = C4_expected;
	L0_expected_prev = L0_expected;
	L1_expected_prev = L1_expected;
	L2_expected_prev = L2_expected;
	L3_expected_prev = L3_expected;
	L4_expected_prev = L4_expected;
	L5_expected_prev = L5_expected;
	L6_expected_prev = L6_expected;
	a_expected_prev = a_expected;
	b_expected_prev = b_expected;
	c_expected_prev = c_expected;
	d_expected_prev = d_expected;
	dig_expected_prev = dig_expected;
	e_expected_prev = e_expected;
	f_expected_prev = f_expected;
	g_expected_prev = g_expected;
	ledG_expected_prev = ledG_expected;
	ledR_expected_prev = ledR_expected;
end



// expected C0
initial
begin
	C0_expected = 1'bX;
end 

// expected C1
initial
begin
	C1_expected = 1'bX;
end 

// expected C2
initial
begin
	C2_expected = 1'bX;
end 

// expected C3
initial
begin
	C3_expected = 1'bX;
end 

// expected C4
initial
begin
	C4_expected = 1'bX;
end 

// expected L0
initial
begin
	L0_expected = 1'bX;
end 

// expected L1
initial
begin
	L1_expected = 1'bX;
end 

// expected L2
initial
begin
	L2_expected = 1'bX;
end 

// expected L3
initial
begin
	L3_expected = 1'bX;
end 

// expected L4
initial
begin
	L4_expected = 1'bX;
end 

// expected L5
initial
begin
	L5_expected = 1'bX;
end 

// expected L6
initial
begin
	L6_expected = 1'bX;
end 

// expected dig
initial
begin
	dig_expected = 1'bX;
end 

// expected a
initial
begin
	a_expected = 1'bX;
end 

// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 

// expected d
initial
begin
	d_expected = 1'bX;
end 

// expected e
initial
begin
	e_expected = 1'bX;
end 

// expected f
initial
begin
	f_expected = 1'bX;
end 

// expected g
initial
begin
	g_expected = 1'bX;
end 

// expected ledG
initial
begin
	ledG_expected = 1'bX;
end 

// expected ledR
initial
begin
	ledR_expected = 1'bX;
end 
// generate trigger
always @(C0_expected or C0 or C1_expected or C1 or C2_expected or C2 or C3_expected or C3 or C4_expected or C4 or L0_expected or L0 or L1_expected or L1 or L2_expected or L2 or L3_expected or L3 or L4_expected or L4 or L5_expected or L5 or L6_expected or L6 or a_expected or a or b_expected or b or c_expected or c or d_expected or d or dig_expected or dig or e_expected or e or f_expected or f or g_expected or g or ledG_expected or ledG or ledR_expected or ledR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C0 = %b | expected C1 = %b | expected C2 = %b | expected C3 = %b | expected C4 = %b | expected L0 = %b | expected L1 = %b | expected L2 = %b | expected L3 = %b | expected L4 = %b | expected L5 = %b | expected L6 = %b | expected a = %b | expected b = %b | expected c = %b | expected d = %b | expected dig = %b | expected e = %b | expected f = %b | expected g = %b | expected ledG = %b | expected ledR = %b | ",C0_expected_prev,C1_expected_prev,C2_expected_prev,C3_expected_prev,C4_expected_prev,L0_expected_prev,L1_expected_prev,L2_expected_prev,L3_expected_prev,L4_expected_prev,L5_expected_prev,L6_expected_prev,a_expected_prev,b_expected_prev,c_expected_prev,d_expected_prev,dig_expected_prev,e_expected_prev,f_expected_prev,g_expected_prev,ledG_expected_prev,ledR_expected_prev);
	$display("| real C0 = %b | real C1 = %b | real C2 = %b | real C3 = %b | real C4 = %b | real L0 = %b | real L1 = %b | real L2 = %b | real L3 = %b | real L4 = %b | real L5 = %b | real L6 = %b | real a = %b | real b = %b | real c = %b | real d = %b | real dig = %b | real e = %b | real f = %b | real g = %b | real ledG = %b | real ledR = %b | ",C0_prev,C1_prev,C2_prev,C3_prev,C4_prev,L0_prev,L1_prev,L2_prev,L3_prev,L4_prev,L5_prev,L6_prev,a_prev,b_prev,c_prev,d_prev,dig_prev,e_prev,f_prev,g_prev,ledG_prev,ledR_prev);
`endif
	if (
		( C0_expected_prev !== 1'bx ) && ( C0_prev !== C0_expected_prev )
		&& ((C0_expected_prev !== last_C0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C0_exp = C0_expected_prev;
	end
	if (
		( C1_expected_prev !== 1'bx ) && ( C1_prev !== C1_expected_prev )
		&& ((C1_expected_prev !== last_C1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C1_expected_prev);
		$display ("     Real value = %b", C1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C1_exp = C1_expected_prev;
	end
	if (
		( C2_expected_prev !== 1'bx ) && ( C2_prev !== C2_expected_prev )
		&& ((C2_expected_prev !== last_C2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C2_exp = C2_expected_prev;
	end
	if (
		( C3_expected_prev !== 1'bx ) && ( C3_prev !== C3_expected_prev )
		&& ((C3_expected_prev !== last_C3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_C3_exp = C3_expected_prev;
	end
	if (
		( C4_expected_prev !== 1'bx ) && ( C4_prev !== C4_expected_prev )
		&& ((C4_expected_prev !== last_C4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_C4_exp = C4_expected_prev;
	end
	if (
		( L0_expected_prev !== 1'bx ) && ( L0_prev !== L0_expected_prev )
		&& ((L0_expected_prev !== last_L0_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L0_expected_prev);
		$display ("     Real value = %b", L0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_L0_exp = L0_expected_prev;
	end
	if (
		( L1_expected_prev !== 1'bx ) && ( L1_prev !== L1_expected_prev )
		&& ((L1_expected_prev !== last_L1_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L1_expected_prev);
		$display ("     Real value = %b", L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_L1_exp = L1_expected_prev;
	end
	if (
		( L2_expected_prev !== 1'bx ) && ( L2_prev !== L2_expected_prev )
		&& ((L2_expected_prev !== last_L2_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L2_expected_prev);
		$display ("     Real value = %b", L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_L2_exp = L2_expected_prev;
	end
	if (
		( L3_expected_prev !== 1'bx ) && ( L3_prev !== L3_expected_prev )
		&& ((L3_expected_prev !== last_L3_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L3_expected_prev);
		$display ("     Real value = %b", L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L3_exp = L3_expected_prev;
	end
	if (
		( L4_expected_prev !== 1'bx ) && ( L4_prev !== L4_expected_prev )
		&& ((L4_expected_prev !== last_L4_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L4_expected_prev);
		$display ("     Real value = %b", L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_L4_exp = L4_expected_prev;
	end
	if (
		( L5_expected_prev !== 1'bx ) && ( L5_prev !== L5_expected_prev )
		&& ((L5_expected_prev !== last_L5_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L5_expected_prev);
		$display ("     Real value = %b", L5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_L5_exp = L5_expected_prev;
	end
	if (
		( L6_expected_prev !== 1'bx ) && ( L6_prev !== L6_expected_prev )
		&& ((L6_expected_prev !== last_L6_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L6_expected_prev);
		$display ("     Real value = %b", L6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_L6_exp = L6_expected_prev;
	end
	if (
		( a_expected_prev !== 1'bx ) && ( a_prev !== a_expected_prev )
		&& ((a_expected_prev !== last_a_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_a_exp = a_expected_prev;
	end
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( d_expected_prev !== 1'bx ) && ( d_prev !== d_expected_prev )
		&& ((d_expected_prev !== last_d_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_expected_prev);
		$display ("     Real value = %b", d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_d_exp = d_expected_prev;
	end
	if (
		( dig_expected_prev !== 1'bx ) && ( dig_prev !== dig_expected_prev )
		&& ((dig_expected_prev !== last_dig_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dig :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dig_expected_prev);
		$display ("     Real value = %b", dig_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_dig_exp = dig_expected_prev;
	end
	if (
		( e_expected_prev !== 1'bx ) && ( e_prev !== e_expected_prev )
		&& ((e_expected_prev !== last_e_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e_expected_prev);
		$display ("     Real value = %b", e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_e_exp = e_expected_prev;
	end
	if (
		( f_expected_prev !== 1'bx ) && ( f_prev !== f_expected_prev )
		&& ((f_expected_prev !== last_f_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_f_exp = f_expected_prev;
	end
	if (
		( g_expected_prev !== 1'bx ) && ( g_prev !== g_expected_prev )
		&& ((g_expected_prev !== last_g_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_g_exp = g_expected_prev;
	end
	if (
		( ledG_expected_prev !== 1'bx ) && ( ledG_prev !== ledG_expected_prev )
		&& ((ledG_expected_prev !== last_ledG_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledG_expected_prev);
		$display ("     Real value = %b", ledG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ledG_exp = ledG_expected_prev;
	end
	if (
		( ledR_expected_prev !== 1'bx ) && ( ledR_prev !== ledR_expected_prev )
		&& ((ledR_expected_prev !== last_ledR_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledR_expected_prev);
		$display ("     Real value = %b", ledR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_ledR_exp = ledR_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module identificadorDeCodigoDeBarras_vlg_vec_tst();
// constants                                           
// general purpose registers
reg E0;
reg E1;
reg E2;
reg E3;
reg E4;
reg E5;
reg E6;
reg E7;
// wires                                               
wire C0;
wire C1;
wire C2;
wire C3;
wire C4;
wire L0;
wire L1;
wire L2;
wire L3;
wire L4;
wire L5;
wire L6;
wire a;
wire b;
wire c;
wire d;
wire dig;
wire e;
wire f;
wire g;
wire ledG;
wire ledR;

wire sampler;                             

// assign statements (if any)                          
identificadorDeCodigoDeBarras i1 (
// port map - connection between master ports and signals/registers   
	.C0(C0),
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.E0(E0),
	.E1(E1),
	.E2(E2),
	.E3(E3),
	.E4(E4),
	.E5(E5),
	.E6(E6),
	.E7(E7),
	.L0(L0),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.L5(L5),
	.L6(L6),
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.dig(dig),
	.e(e),
	.f(f),
	.g(g),
	.ledG(ledG),
	.ledR(ledR)
);

// E0
always
begin
	E0 = 1'b0;
	E0 = #1000 1'b1;
	#1000;
end 

// E1
always
begin
	E1 = 1'b0;
	E1 = #2000 1'b1;
	#2000;
end 

// E2
always
begin
	E2 = 1'b0;
	E2 = #4000 1'b1;
	#4000;
end 

// E3
initial
begin
	repeat(62)
	begin
		E3 = 1'b0;
		E3 = #8000 1'b1;
		# 8000;
	end
	E3 = 1'b0;
end 

// E4
initial
begin
	repeat(31)
	begin
		E4 = 1'b0;
		E4 = #16000 1'b1;
		# 16000;
	end
	E4 = 1'b0;
end 

// E5
initial
begin
	repeat(15)
	begin
		E5 = 1'b0;
		E5 = #32000 1'b1;
		# 32000;
	end
	E5 = 1'b0;
	E5 = #32000 1'b1;
end 

// E6
initial
begin
	repeat(7)
	begin
		E6 = 1'b0;
		E6 = #64000 1'b1;
		# 64000;
	end
	E6 = 1'b0;
	E6 = #64000 1'b1;
end 

// E7
initial
begin
	repeat(3)
	begin
		E7 = 1'b0;
		E7 = #128000 1'b1;
		# 128000;
	end
	E7 = 1'b0;
	E7 = #128000 1'b1;
end 

identificadorDeCodigoDeBarras_vlg_sample_tst tb_sample (
	.E0(E0),
	.E1(E1),
	.E2(E2),
	.E3(E3),
	.E4(E4),
	.E5(E5),
	.E6(E6),
	.E7(E7),
	.sampler_tx(sampler)
);

identificadorDeCodigoDeBarras_vlg_check_tst tb_out(
	.C0(C0),
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.L0(L0),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.L5(L5),
	.L6(L6),
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.dig(dig),
	.e(e),
	.f(f),
	.g(g),
	.ledG(ledG),
	.ledR(ledR),
	.sampler_rx(sampler)
);
endmodule

